<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_web_cam_8h" kind="file" language="C++">
    <compoundname>WebCam.h</compoundname>
    <includes refid="_video_source_8h" local="yes">VideoSource.h</includes>
    <includedby refid="_manage_source_video_8h" local="yes">controller/ManageSourceVideo.h</includedby>
    <includedby refid="_web_cam_8cpp" local="yes">controller/sources/WebCam.cpp</includedby>
    <incdepgraph>
      <node id="142">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="140">
        <label>controller/sources/WebCam.h</label>
        <link refid="_web_cam_8h"/>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>VideoSource.h</label>
        <link refid="_video_source_8h_source"/>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="144">
        <label>controller/sources/WebCam.h</label>
        <link refid="_web_cam_8h"/>
        <childnode refid="145" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="146">
        <label>model/RecognitionManager.h</label>
        <link refid="_recognition_manager_8h"/>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>controller/ManageSourceVideo.h</label>
        <link refid="_manage_source_video_8h"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_web_cam" prot="public">WebCam</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>WEBCAM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WEBCAM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoSource.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_web_cam" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_web_cam" kindref="compound">WebCam</ref><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_video_source" kindref="compound">VideoSource</ref>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_web_cam" kindref="compound">WebCam</ref>();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_web_cam" kindref="compound">WebCam</ref>();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>getColorFeed();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>getDepthFeed();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>getOriginalDepth(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>feed;}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>getMappedFeed();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDepthSource(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getTimeStamp()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;font<sp/>color=\&quot;#CD2034\&quot;&gt;&amp;#149;&lt;/font&gt;<sp/>En<sp/>direct&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getTimePosition()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>100;}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getExactTimePosition()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;int,int&gt;<sp/>getScreenSize(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;int,int&gt;(1280,720);}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::VideoCapture<sp/>cv_cap;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>feed;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//WEBCAM_H</highlight></codeline>
    </programlisting>
    <location file="controller/sources/WebCam.h"/>
  </compounddef>
</doxygen>
