<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="plan_library_8cpp" kind="file" language="C++">
    <compoundname>planLibrary.cpp</compoundname>
    <includes refid="plan_library_8h" local="yes">../include/planLibrary.h</includes>
    <includes refid="bnflite_8h" local="yes">../include/bnflite.h</includes>
    <incdepgraph>
      <node id="783">
        <label>list</label>
      </node>
      <node id="777">
        <label>rule.h</label>
        <link refid="rule_8h_source"/>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
      </node>
      <node id="772">
        <label>../include/planLibrary.h</label>
        <link refid="plan_library_8h"/>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
      </node>
      <node id="771">
        <label>model/recoPlan/PARC/Plan_Library/planLibrary.cpp</label>
        <link refid="plan_library_8cpp"/>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="781">
        <label>../include/bnflite.h</label>
        <link refid="bnflite_8h_source"/>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
      </node>
      <node id="776">
        <label>string</label>
      </node>
      <node id="779">
        <label>map</label>
      </node>
      <node id="774">
        <label>unordered_set</label>
      </node>
      <node id="782">
        <label>string.h</label>
      </node>
      <node id="786">
        <label>typeinfo</label>
      </node>
      <node id="784">
        <label>bitset</label>
      </node>
      <node id="778">
        <label>vector</label>
      </node>
      <node id="780">
        <label>utility</label>
      </node>
      <node id="773">
        <label>iostream</label>
      </node>
      <node id="775">
        <label>unordered_map</label>
      </node>
      <node id="785">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/planLibrary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/bnflite.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacebnf" kindref="compound">bnf</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*std::unordered_set&lt;int&gt;<sp/>prs_goals;</highlight></codeline>
<codeline lineno="7"><highlight class="comment">std::unordered_set&lt;int&gt;<sp/>prs_terminals;</highlight></codeline>
<codeline lineno="8"><highlight class="comment">std::unordered_set&lt;int&gt;<sp/>prs_nonTerminals;</highlight></codeline>
<codeline lineno="9"><highlight class="comment">std::unordered_map&lt;int,rule&gt;<sp/>prs_rules;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">int<sp/>currentRule;</highlight></codeline>
<codeline lineno="12"><highlight class="comment">int<sp/>tempConstraint;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">static<sp/>bool<sp/>ar_goal(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="15"><highlight class="comment">{</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_goals.insert(std::stoi(string(lexem,len)));</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="18"><highlight class="comment">}</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">static<sp/>bool<sp/>ar_terminals(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="21"><highlight class="comment">{</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_terminals.insert(std::stoi(string(lexem,len)));</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="24"><highlight class="comment">}</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">static<sp/>bool<sp/>ar_nonTerminals(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="27"><highlight class="comment">{</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_nonTerminals.insert(std::stoi(string(lexem,len)));</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="30"><highlight class="comment">}</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">static<sp/>bool<sp/>ar_newId(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="33"><highlight class="comment">{</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>currentRule<sp/>=<sp/>std::stoi(string(lexem,len));</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="36"><highlight class="comment">}</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">static<sp/>bool<sp/>ar_newRule(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="39"><highlight class="comment">{</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_rules[currentRule]<sp/>=<sp/>rule(std::stoi(string(lexem,len)),currentRule);</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="42"><highlight class="comment">}</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">static<sp/>bool<sp/>ar_newchild(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="45"><highlight class="comment">{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_rules[currentRule].addChild(std::stoi(string(lexem,len)));</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="48"><highlight class="comment">}</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">static<sp/>bool<sp/>ar_tempCst(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="51"><highlight class="comment">{</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>tempConstraint<sp/>=<sp/>std::stoi(string(lexem,len));</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="54"><highlight class="comment">}</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">static<sp/>bool<sp/>ar_newCst(const<sp/>char*<sp/>lexem,<sp/>size_t<sp/>len)</highlight></codeline>
<codeline lineno="57"><highlight class="comment">{</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>prs_rules[currentRule].addConstraint(std::make_pair(tempConstraint,<sp/>std::stoi(string(lexem,len))));</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="60"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">planLibrary::planLibrary()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="67"><highlight class="comment">planLibrary::planLibrary(const<sp/>char*<sp/>spl)</highlight></codeline>
<codeline lineno="68"><highlight class="comment">{</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>Token<sp/>digit(&apos;0&apos;,&apos;9&apos;);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>number<sp/>=<sp/>!Token(&quot;-&quot;)<sp/>+<sp/>1*digit;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>goals<sp/>=<sp/>&quot;Goals&quot;;</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>terminals<sp/>=<sp/>&quot;Terminals&quot;;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>nonTerminals<sp/>=<sp/>&quot;NonTerminals&quot;;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>rules<sp/>=<sp/>&quot;Rules&quot;;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>delimiter<sp/>=<sp/>&quot;,&quot;;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>Lexem<sp/>newLine<sp/>=<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_line_goals<sp/>=<sp/>goals<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>number<sp/>+<sp/>ar_goal<sp/>+<sp/>*(delimiter<sp/>+<sp/>number<sp/>+<sp/>ar_goal)<sp/>+<sp/>Token(&apos;)&apos;);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_line_terminals<sp/>=<sp/>terminals<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>number<sp/>+<sp/>ar_terminals<sp/>+<sp/>*(delimiter<sp/>+<sp/>number<sp/>+<sp/>ar_terminals)<sp/>+<sp/>Token(&apos;)&apos;);</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_line_nonterminals<sp/>=<sp/>nonTerminals<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>number<sp/>+<sp/>ar_nonTerminals<sp/>+<sp/>*(delimiter<sp/>+<sp/>number<sp/>+<sp/>ar_nonTerminals)<sp/>+<sp/>Token(&apos;)&apos;);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_rule_children<sp/>=<sp/>number<sp/>+<sp/>ar_newchild<sp/>+<sp/>*(delimiter<sp/>+<sp/>number+<sp/>ar_newchild<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_rule_constraints<sp/>=<sp/>*(Token(&apos;(&apos;)<sp/>+<sp/>number<sp/>+<sp/>ar_tempCst<sp/>+<sp/>delimiter<sp/>+<sp/>number<sp/>+<sp/>ar_newCst<sp/>+Token(&apos;)&apos;)<sp/>+<sp/>!delimiter);</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_rule<sp/>=<sp/>number<sp/>+<sp/>ar_newId<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>number<sp/>+<sp/>ar_newRule<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>r_rule_children<sp/>+<sp/>Token(&apos;)&apos;)<sp/>+<sp/>delimiter<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>r_rule_constraints<sp/>+<sp/>Token(&apos;)&apos;)<sp/>+<sp/>Token(&apos;)&apos;);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>r_rules<sp/>=<sp/>rules<sp/>+<sp/>Token(&apos;(&apos;)<sp/>+<sp/>*(r_rule)<sp/>+<sp/>Token(&apos;)&apos;);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>Rule<sp/>root<sp/>=<sp/>r_line_goals<sp/>+<sp/>r_line_terminals<sp/>+<sp/>r_line_nonterminals<sp/>+<sp/>r_rules;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>tst<sp/>=<sp/>Analyze(root,spl,&amp;tail);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(tst<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Plan<sp/>Libraty<sp/>configured&quot;<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Parsing<sp/>errors<sp/>detected,<sp/>status<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>tst<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="96"><highlight class="comment">&lt;&lt;<sp/>&quot;stopped<sp/>at:<sp/>&quot;<sp/>&lt;&lt;<sp/>tail<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>this-&gt;goals<sp/>=<sp/>prs_goals;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>this-&gt;terminals<sp/>=<sp/>prs_terminals;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>this-&gt;nonTerminals<sp/>=<sp/>prs_nonTerminals;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>this-&gt;rules<sp/>=<sp/>prs_rules;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">planLibrary::~planLibrary()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>planLibrary::isTerminal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symbol)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>terminals.count(symbol)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>planLibrary::isGoal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symbol)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>goals.count(symbol)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planLibrary::addRule(<ref refid="classrule" kindref="compound">rule</ref><sp/>r)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>rules[(int)r]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nonTerminals.count(r.getPrimitive())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonTerminals.insert(r.getPrimitive());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/>r.getChildren())</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nonTerminals.count(it)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(terminals.count(it)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonTerminals.insert(it);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planLibrary::addSymbol(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminals.insert(s);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonTerminals.insert(s);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goals.insert(s);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>planLibrary::toString()</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>resu<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>goals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Goals(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itG<sp/>:<sp/>this-&gt;goals)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/>std::to_string(itG);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt<sp/>&lt;<sp/>this-&gt;goals.size())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>terminals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Terminals(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itT<sp/>:<sp/>this-&gt;terminals)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/>std::to_string(itT);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt<sp/>&lt;<sp/>this-&gt;terminals.size())</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>non-terminals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;NonTerminals(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itNT<sp/>:<sp/>this-&gt;nonTerminals)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/>std::to_string(itNT);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt<sp/>&lt;<sp/>this-&gt;nonTerminals.size())</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>rules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Rules(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itR<sp/>:<sp/>this-&gt;rules)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>+=<sp/>std::to_string(itR.first);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>itR.second.toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt<sp/>&lt;<sp/>this-&gt;rules.size())</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>resu+=</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resu;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_set&lt;int&gt;&amp;<sp/>planLibrary::getTerminals()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="208"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>terminals;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_set&lt;int&gt;&amp;<sp/>planLibrary::getNonTerminals()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="213"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonTerminals;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_set&lt;int&gt;&amp;<sp/>planLibrary::getGoals()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="218"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>goals;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_map&lt;int,rule&gt;&amp;<sp/>planLibrary::getRules()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="223"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rules;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="model/recoPlan/PARC/Plan_Library/planLibrary.cpp"/>
  </compounddef>
</doxygen>
