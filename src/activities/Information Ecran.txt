if(!act->currentAffordances.empty() ){

        Affordance* aff = ObjectsMat::updateAffordance(act->currentAffordances);
        informations["actionActuelle"] = {{"nom",aff->getName()},{"pourcentage",  to_string(actionActuellePourcentage).substr(0,5)}};
		
        if (actionActuelleNom != aff->getName() || aff->getName()!="NULL") {
			
            actionActuelleNom = aff->getName();
            actionActuellePourcentage = aff->getObjectProbability()*100;
            if (informations["actionPrecedente2"]["nom"] != actionActuelleNom) {
                if (informations["actionPrecedente1"]["nom"] != actionActuelleNom) {
                    if(aff->getName() != "NULL") {
                        pl.update(aff);
                    }
                    std::cout << "hold(" + aff->getName() + ")" << std::endl;

#if defined(USE_KITCHEN)
                    trace->addAffordance(aff,(actualTime - startTime).count());
#endif
                }
                informations["actionPrecedente1"] = informations["actionPrecedente2"];
                informations["actionPrecedente2"] = {{"nom", actionActuelleNom},{"pourcentage", to_string(actionActuellePourcentage).substr(0,5)}};
            } else {
                informations["actionPrecedente2"] = {{"nom", actionActuelleNom},{"pourcentage", to_string(actionActuellePourcentage).substr(0,5)}};
            }
			
			// Check if the new Action was planned
			
			while(i<tempActions.length() && tempActions[i].first!=aff->getName())
			{
				i++;
			}
			if(tempActions[i].first!=aff->getName())
			{
				NotifyMessageBox::showMessage(tr("You did an unexpected action : \"%1\" \nWe expected you to do : \"%2\").arg(
                              aff->getName(),tempActions[0].first), 
                              QFont("Segoe UI", 12), 
                              1500, // time interval to destroy after
                              this);
			}
				
			startTime = std::chrono::duration_cast< std::chrono::milliseconds >(
                std::chrono::system_clock::now().time_since_epoch());
			
			
		

				std::vector<std::pair<std::string,float>> tempActions = pl.getNextActions();
				std::vector<std::pair<std::string,float>> tempGoal = pl.getGoalsProba();
				if(tempActions.empty()){
					std::cout<<"tempActions empty"<<std::endl;
				}
				if(tempGoal.empty()){
					std::cout<<"tempGoal empty"<<std::endl;
				}
		}
			else{
				if (actualTime-startTime<TIME_BEFORE_ALERT){
					startTime = std::chrono::duration_cast< std::chrono::milliseconds >(
					std::chrono::system_clock::now().time_since_epoch());	
					NotifyMessageBox::showMessage(tr("You didn't finish the goal : \"%1\" \nWe expected you to do : \"%2\").arg(
                              tempGoal[0].first,tempActions[0].first), 
                              QFont("Segoe UI", 12), 
                              1500, // time interval to destroy after
                              this);
				}
			}
			
        }